name: CI

permissions:
  contents: read

on:
  pull_request:
  push:
    branches:
      - main
      - dev
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10

defaults:
  run:
    shell: bash --noprofile --norc -CeEuxo pipefail {0}

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  tidy:
    uses: taiki-e/github-actions/.github/workflows/tidy.yml@main
    permissions:
      contents: read
      pull-requests: write # for gh pr edit --add-assignee
      repository-projects: read # for gh pr edit --add-assignee
    secrets: inherit

  test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            build_tool: cargo
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu.2.17
            build_tool: cargo-zigbuild
          - os: ubuntu-latest
            target: x86_64-pc-windows-gnu
          - os: macos-latest # AArch64
            checksums: sha256,sha512,sha1,md5
          - os: macos-13 # x86_64
            checksums: sha256,sha512,sha1,md5
          - os: macos-latest
            checksums: sha256,sha512,sha1,md5
            target: x86_64-apple-darwin
          - os: macos-latest
            checksums: sha256,sha512,sha1,md5
            target: aarch64-apple-darwin
          - os: macos-latest
            checksums: sha256,sha512,sha1,md5
            target: universal-apple-darwin
          - os: macos-latest
            checksums: sha256,sha512,sha1,md5
            target: universal-apple-darwin
            build_tool: cargo
          - os: windows-latest
          - os: windows-latest
            target: aarch64-pc-windows-msvc
    runs-on: ${{ matrix.os || 'ubuntu-latest' }}
    timeout-minutes: 60
    steps:
      - uses: taiki-e/checkout-action@v1
      - uses: taiki-e/github-actions/install-rust@stable
      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: matrix.target != '' && matrix.build_tool == 'cargo'
      - run: cargo new --bin test-crate
      - uses: ./
        id: upload-rust-binary-action
        with:
          dry-run: true
          bin: test-crate
          target: ${{ matrix.target }}
          build-tool: ${{ matrix.build_tool }}
          checksum: ${{ matrix.checksums || 'b2,sha256,sha512,sha1,md5' }}
          tar: all
          zip: all
          manifest-path: test-crate/Cargo.toml
          codesign: '-'
          codesign-prefix: 'com.example.'
          codesign-options: 'runtime'
          upx: ${{ startsWith(matrix.os, 'ubuntu-') && matrix.target != 'x86_64-pc-windows-gnu' && matrix.target != 'aarch64-unknown-linux-gnu' }}
      - name: Check action outputs
        run: |
          printf 'outputs.archive should not be empty\n'
          test -n "${{ steps.upload-rust-binary-action.outputs.archive }}"

          printf 'outputs.zip should be a file\n'
          test -f "${{ steps.upload-rust-binary-action.outputs.zip }}"

          printf 'outputs.tar should be a file\n'
          test -f "${{ steps.upload-rust-binary-action.outputs.tar }}"

          printf 'outputs.sha256 should be a file\n'
          test -f "${{ steps.upload-rust-binary-action.outputs.sha256 }}"

          printf 'outputs.sha512 should be a file\n'
          test -f "${{ steps.upload-rust-binary-action.outputs.sha512 }}"

          printf 'outputs.sha1 should be a file\n'
          test -f "${{ steps.upload-rust-binary-action.outputs.sha1 }}"

          printf 'outputs.md5 should be a file\n'
          test -f "${{ steps.upload-rust-binary-action.outputs.md5 }}"
      - name: Check UPX
        if: startsWith(matrix.os, 'ubuntu-') && matrix.target != 'x86_64-pc-windows-gnu' && matrix.target != 'aarch64-unknown-linux-gnu'
        run: |
          printf 'binary should be compressed with UPX\n'
          target_dir="./test-crate/target/release"
          tar -C "$target_dir" -xf "${{ steps.upload-rust-binary-action.outputs.tar }}"
          test -n "$(file "$target_dir/test-crate" | grep 'no section header')"
      - name: Check b2 output
        if: ${{ contains(matrix.checksums || 'b2,sha256,sha512,sha1,md5', 'b2') }}
        run: |
          printf 'outputs.b2 should not be empty\n'
          test -n "${{ steps.upload-rust-binary-action.outputs.b2 }}"
